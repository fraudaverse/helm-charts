# Default values for processing.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates

replicaCount: 2

image:
  repository: 560924052112.dkr.ecr.us-east-1.amazonaws.com/processing
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: v0.1.0

# e.g.
# kubectl create secret docker-registry fraudaverse-ecr --docker-server=560924052112.dkr.ecr.us-east-1.amazonaws.com --docker-username=AWS --docker-password=$(aws ecr get-login-password --region us-east-1) --namespace=default
imagePullSecrets:
  - name: fraudaverse-ecr
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use. n
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

# security context for processing pod
podSecurityContext: 
  runAsUser: 1000
  runAsGroup: 3000
  fsGroup: 2000

# security Context for processing containers
securityContext:
  allowPrivilegeEscalation: false
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# HTTP Port exposed by the processing containers
service:
  type: ClusterIP
  port: 13100

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 3
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

###
# FraudAverse Application Config
###

# Fraudaverse processing-service specific values
processing:
  # the service can prime it's config from a file or MongoDb. Default value
  # boots an empty config, which does not do anything but respond to /status API requests
  # if MONGO is set, processing uses the MongoDb values in "mongo" sub-dictionary and cfgDb and cfgColl
  # values to find the config in the correct db/collection of the database.
  api:
    # ip where application exposes HTTP
    ip: 0.0.0.0
    # HTTP Port used inside of the processing container
    port: 13100
    tls: 0 # not supported yet
  Envs:
    # PRIMER=MONGO suggests the service to either load the config from MONGO_ prefixed environment vars
    # or from PRIMER=FILE, which is the file mounted at CFG_FILE then
    PRIMER: "MONGO"
    CFG_FILE: "/processing/cfg/config.json"
    # Processing supports API and BATCH mode
    MODE: API
    # Main Runtime threads available (shared by HTTP server and processing)
    MAIN_WORKER_THREADS: 8
    # Set to 1 if you want processing to use a different threadpool than http servers
    USE_CFG_WORKERS: 0
    # Size of potential threadpool for processing workers
    CFG_WORKER_THREADS: 0
    # Address of the API (please changes values above)
    API_ADDRV4: "{{ .Values.processing.api.ip }}:{{ .Values.processing.api.port }}"
    # API TLS
    API_TLS: 0
    # dns-name:port of mongodb for configuration priming
    MONGO_URI: "{{- .Release.Name }}-mongo-cfg-trx:27017"
    # Database name where the config is stored
    MONGO_CFG_DB: FA_Configuration
    # Collection, where the config is stored
    MONGO_CFG_COLL: Configuration
    #MONGO_USER: 
    #MONGO_PASSWORD:
    #MONGO_TLS:
    # This is specific to the processing configuration below. The Datastore in the array "datastores" called "Payments"
    # is instructed to connect the the database address provided in env "TRX_MONGO_IP_PORT"
    # This datastore stores the calculated transactions
    TRX_MONGO_IP_PORT: "{{- .Release.Name }}-mongo-cfg-trx:27017"
    # This is specific to the processing configuration below. The Datastore in the array "datastores" called "RedisCache"
    # is instructed to connect the the database address provided in env "REDIS_CACHE_IP_PORT"
    # This 
    REDIS_CACHE_IP_PORT: "redis://{{- .Release.Name }}-redis-trx-master:6379"
    # Log level of processing: DEBUG/INFO/WARN/ERROR
    RUST_LOG: "WARN"


# trx-cache for realtime data
redis-trx:
  enabled: yes
  auth:
    enabled: false # TODO
  image:
    registry: docker.io
    pullPolicy: IfNotPresent
    repository: redis/redis-stack-server # TODO: not working yet
    tag: "7.0.6-RC5"
  master:
    containerPorts:
      # port used by redis inside of the container
      redis: 13350
    service:
      ports:
        # port exposed by the redis k8s-service
        redis: 13350
    podSecurityContext:
      enabled: true 
      runAsUser: 1000
      runAsGroup: 3000
      fsGroup: 2000
    containerSecurityContext:
      enabled: true
      allowPrivilegeEscalation: false
    configuration: | 
      loadmodule /opt/redis-stack/lib/redistimeseries.so

  replica:
    containerPorts:
      # port used by redis inside of the container
      redis: 6379
    service:
      ports:
        # port exposed by the redis k8s-service
        redis: 6379
    podSecurityContext:
      enabled: true 
      runAsUser: 1000
      runAsGroup: 3000
      fsGroup: 2000
    containerSecurityContext:
      enabled: true
      allowPrivilegeEscalation: false
    configuration: | 
      loadmodule /opt/redis-stack/lib/redistimeseries.so

# mongodb for configs and transaction storage
mongo-cfg-trx:
  enabled: yes
  architecture: standalone
  # mongodb container port
  containerPorts:
    mongodb: 13250
  service:
    ports:
      # mongodb exposing service port
      mongodb: 13250
  # mongo pod security context
  podSecurityContext:
    enabled: true 
    runAsUser: 1000
    runAsGroup: 3000
    fsGroup: 2000
  # mongo container security context
  containerSecurityContext:
    enabled: true
    allowPrivilegeEscalation: false
  auth:
    enabled: false # TODO
  persistence:
    enabled: false # TODO
  initdbScripts:
    01-dbs-users-init.js: |
      console.log("deploying config database FA_Configuration");
      db = new Mongo().getDB("FA_Configuration");
      db.createCollection('Configuration', {capped: false});
      console.log("deploying message database FA_Messages");
      db = new Mongo().getDB("FA_Messages");
      db.createCollection('_', {capped: false});
    02-load-predefined-json.sh: |
      mongoimport --db FA_Configuration --collection Configuration --type json --file /docker-entrypoint-initdb.d/fa_config.json
    fa_config.json: |
      {
          "version": "0.1",
          "masterSettings": {
              "name": "Minimal Default Config",
              "description": "This is a minimal Fraudaverse config responding on /status, /pipeline and /account.",
              "deployment": {
                  "timestamp": "2023-01-01 00:00:00",
                  "user": "John Doe"
              },
              "analyticsDatastores": {
                  "production": "",
                  "simulation": ""
              },
              "infinity": {
                  "plus": 1000,
                  "minus": -1000.0
              },
              "tls": {
                  "clientCert": "MY_CLIENT_CERT",
                  "clientKey": "MY_CLIENT_KEY",
                  "clientKeyPassword": "MY_CLIENT_KEY_PASSWORD"
              },
              "systemTimestamp": {
                  "serialization": "ms",
                  "key": "SystemTimestamp"
              }
          },
          "pipelines": [
              {
                  "name": "Amount Aggregation",
                  "uri": "amount",
                  "description": "This pipeline is accessible under /amount and aggregates the daily average of 'Amount' input values for 'Account' input values.",
                  "presets": [],
                  "sla": {
                      "timeout": 200,
                      "standbyExecution": [
                          "Timeout = true"
                      ]
                  },
                  "records": {
                      "store": true,
                      "datastore": {
                          "database": "Payments",
                          "key": "timestamp",
                          "sharding": "daily"
                      }
                  },
                  "elements": {
                      "request": [],
                      "stages": [
                          {
                              "name": "Stage 1 - Aggregate Amount",
                              "comment": "Aggregate Amount for Account",
                              "computes": [
                                  {
                                      "enabled": true,
                                      "name": "Aggregate Daily Amount",
                                      "comment": "A TimeAggregate aggregating Daily Amount for Account in the last 30 days before trx timestamp",
                                      "compute": "TimeAggregate",
                                      "raw": true,
                                      "datastore": {
                                          "database": "RedisCache",
                                          "key": "account_amount_daily"
                                      },
                                      "entity": "Account",
                                      "amount": "Amount",
                                      "calculateFeatures": true,
                                      "update": true,
                                      "process": true,
                                      "includeCurrent": true,
                                      "features": [
                                          {
                                              "name": "AccountDailyAverage30d",
                                              "comment": "",
                                              "calculate": "Avg",
                                              "from": 30,
                                              "to": 0,
                                              "unit": "Days"
                                          }
                                      ]
                                  }
                              ]
                          }
                      ],
                      "response": []
                  }
              },
              {
                  "name": "Account Name",
                  "uri": "account",
                  "description": "This pipeline is accessible under /account and stores an AccountName if 'SetName == true' in input trx",
                  "presets": [],
                  "sla": {
                      "timeout": 200,
                      "standbyExecution": [
                          "Timeout = true"
                      ]
                  },
                  "records": {
                      "store": false,
                      "datastore": {
                          "database": "",
                          "key": "",
                          "sharding": ""
                      }
                  },
                  "elements": {
                      "request": [],
                      "stages": [
                          {
                              "name": "Stage 1 - Account Masterdata",
                              "comment": "Stores account Masterdata when SetName == true in input. Otherwise output of Masterdata",
                              "computes": [
                                  {
                                      "enabled": true,
                                      "name": "Account Name",
                                      "comment": "A single value stored in database",
                                      "compute": "StoredValue",
                                      "datastore": {
                                          "database": "RedisCache",
                                          "key": "account_name"
                                      },
                                      "entity": "Account",
                                      "includeCurrent": true,
                                      "overwrite": "SetName == true",
                                      "calculateFeatures": [
                                          "1==1"
                                      ],
                                      "update": true,
                                      "process": true,
                                      "features": [
                                          {
                                              "name": "AccountName",
                                              "reference": "Name",
                                              "calculate": "Value"
                                          }
                                      ]
                                  }
                              ]
                          }
                      ],
                      "response": []
                  }
              }
          ],
          "datastores": [
              {
                  "provider": "MongoDB",
                  "name": "Payments",
                  "url": "${TRX_MONGO_IP_PORT}",
                  "username": "",
                  "password": "",
                  "timeout": 5,
                  "database": "FA_Messages",
                  "collection": "Messages",
                  "poolsize": 30,
                  "tls": false,
                  "tls_ca_path": "",
                  "tls_cert_key_file": "",
                  "tls_allow_invalid_hostnames": false,
                  "tls_allow_invalid_certificates": false
              },
              {
                  "provider": "Redis",
                  "name": "RedisCache",
                  "url": "${REDIS_CACHE_IP_PORT}",
                  "key_prefix": "fa:",
                  "poolsize": 500,
                  "timeout": 5
              }
          ],
          "simulationSettings":{
              "period": {
                  "from": 0,
                  "to": 0,
                  "reference": "Relative"
              },
              "datastore": "",
              "ruleOptimization": {
                  "enabled": false,
                  "minimumHitRate": 0,
                  "minimumFalsePositives": 0,
                  "benefitWeight": 0,
                  "maximumNumberOfOptimizationProposals": 0,
                  "minimalSignificantBenefitDeleteRule": 0
              }
          }
      }
